# -*- coding: utf-8 -*-
"""fcc_predict_health_costs_with_regression_corado.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1avZvrEq5BH0ZYOxRc14KRycwhoZYi4yb
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries. You may or may not use all of these.
!pip install -q git+https://github.com/tensorflow/docs
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

import tensorflow_docs as tfdocs
import tensorflow_docs.plots
import tensorflow_docs.modeling

# Import data
!wget https://cdn.freecodecamp.org/project-data/health-costs/insurance.csv
dataset = pd.read_csv('insurance.csv')
dataset.tail()

# Convert categorical columns into numeric
CATEGORICAL_COLUMNS = ['sex', 'smoker', 'region']
for column in CATEGORICAL_COLUMNS:
    dataset[column] = dataset[column].astype('category').cat.codes

# Separate dataset into train and test data
train_size = int(0.8 * len(dataset))
train_dataset, test_dataset = dataset[:train_size], dataset[train_size:]

# Pop 'expenses' column as label
train_labels, test_labels = train_dataset.pop('expenses'), test_dataset.pop('expenses')

# Create a normalization layer
normalizer = layers.experimental.preprocessing.Normalization(axis=-1)
normalizer.adapt(np.array(train_dataset))

# Create the model
model = keras.Sequential([
    normalizer,
    layers.Dense(2, activation='relu'),
    layers.Dense(1)
])

# Compile the model
model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.1),
              loss='mae',
              metrics=['mae', 'mse'])

# Display the model summary
model.summary()

# Train the model
history = model.fit(train_dataset, train_labels, epochs=100, validation_split=0.2, verbose=1)

# Evaluate the model on the test set
loss, mae, mse = model.evaluate(test_dataset, test_labels, verbose=2)

# Print testing results
print("Testing set Mean Abs Error: {:5.2f} expenses".format(mae))

# Check if the challenge is passed
if mae < 3500:
    print("You passed the challenge. Great job!")
else:
    print("The Mean Abs Error must be less than 3500. Keep trying.")

# Plot predictions
test_predictions = model.predict(test_dataset).flatten()

plt.figure(figsize=(8, 8))
plt.scatter(test_labels, test_predictions)
plt.xlabel('True values (expenses)')
plt.ylabel('Predictions (expenses)')
lims = [0, 50000]
plt.xlim(lims)
plt.ylim(lims)
plt.plot(lims, lims, color='red', linewidth=2, linestyle='dashed')
plt.title('True vs. Predicted Values')
plt.show()
# -*- coding: utf-8 -*-
"""fcc_sms_text_classification_corado.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p-QTdgjrjD0xqcJt0FrD9iE_6ZoFcqF-
"""

# import libraries
try:
  # %tensorflow_version only exists in Colab.
  !pip install tf-nightly
except Exception:
  pass
import tensorflow as tf
import pandas as pd
from tensorflow import keras
!pip install tensorflow-datasets
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)

# get data files
!wget https://cdn.freecodecamp.org/project-data/sms/train-data.tsv
!wget https://cdn.freecodecamp.org/project-data/sms/valid-data.tsv

train_file_path = "train-data.tsv"
test_file_path = "valid-data.tsv"

train_data = pd.read_csv(train_file_path, sep='\t', names=['label', 'text'])
test_data = pd.read_csv(test_file_path, sep='\t', names=['label', 'text'])

from sklearn.model_selection import train_test_split

X_train, X_val, y_train, y_val = train_test_split(train_data['text'], train_data['label'], test_size=0.2, random_state=42)

max_sequence_length = 100
tokenizer = tf.keras.layers.TextVectorization(max_tokens=10000, output_sequence_length=max_sequence_length)
tokenizer.adapt(X_train.values)

X_train_tokens = tokenizer(X_train.values)
X_val_tokens = tokenizer(X_val.values)

label_mapping = {'ham': 0, 'spam': 1}
y_train_numeric = y_train.map(label_mapping)
y_val_numeric = y_val.map(label_mapping)

model = keras.Sequential([
    keras.layers.Embedding(input_dim=len(tokenizer.get_vocabulary()), output_dim=128, mask_zero=True),
    keras.layers.LSTM(64),
    keras.layers.Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

history = model.fit(X_train_tokens, y_train_numeric, validation_data=(X_val_tokens, y_val_numeric), epochs=5)

def predict_message(pred_text):
    tokenized_text = tokenizer([pred_text])
    padded_text = keras.preprocessing.sequence.pad_sequences(tokenized_text, maxlen=max_sequence_length)
    prediction = model.predict(padded_text)[0][0]
    label = 'spam' if prediction >= 0.5 else 'ham'
    return [prediction, label]

# Run this cell to test your function and model. Do not modify contents.
def test_predictions():
  test_messages = ["how are you doing today",
                   "sale today! to stop texts call 98912460324",
                   "i dont want to go. can we try it a different day? available sat",
                   "our new mobile video service is live. just install on your phone to start watching.",
                   "you have won Â£1000 cash! call to claim your prize.",
                   "i'll bring it tomorrow. don't forget the milk.",
                   "wow, is your arm alright. that happened to me one time too"
                  ]

  test_answers = ["ham", "spam", "ham", "spam", "spam", "ham", "ham"]
  passed = True

  for msg, ans in zip(test_messages, test_answers):
    prediction = predict_message(msg)
    if prediction[1] != ans:
      passed = False

  if passed:
    print("You passed the challenge. Great job!")
  else:
    print("You haven't passed yet. Keep trying.")

test_predictions()